# Unique name for this workflow
name: Salesforce DX - Validate Package

# Definition when the workflow should run
on:
  workflow_dispatch:

  pull_request:
    paths-ignore:
      - 'sfdx-project.json'
      - 'README.md'

# Jobs to be executed
jobs:
  formatting-and-linting:
    name: Formatting & Linting
    runs-on: ubuntu-latest
    steps:
      # Checkout the code in the pull request
      - name: 'Checkout source code'
        uses: actions/checkout@v2

      # Cache node_modules to speed up the process
      - name: Restore node_modules cache
        id: cache-npm
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ env.cache-name }}-
            npm-
      # Install npm dependencies for Prettier and Jest
      - name: 'Install npm dependencies'
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci

      # Prettier formatting
      - name: 'Code formatting verification with Prettier'
        run: npm run prettier:verify

      # Lint LWC
      - name: 'Lint Lightning Web Components'
        run: npm run lint:lwc

      #Lint Aura (turnned off right now - no files to lint)
      - name: 'Lint Aura components'
        run: 'npm run lint:aura'

  scratch-org-test:
    name: Setup Scratch Org & Run Tests
    runs-on: ubuntu-latest
    needs: formatting-and-linting
    steps:
      # Install Salesforce CLI
      - name: Install Salesforce CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
          ./sfdx-cli/install
      # Checkout the code in the pull request
      - name: 'Checkout source code'
        uses: actions/checkout@v2

      # Cache node_modules to speed up the process
      - name: Restore node_modules cache
        id: cache-npm
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ env.cache-name }}-
            npm-
      # Install npm dependencies for Prettier and Jest
      - name: 'Install npm dependencies'
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci

      # Install texei SFDX Plugin
      - name: 'Install texei SFDX Plugin'
        run: 'echo "y" | sfdx plugins:install texei-sfdx-plugin'

      # Store secret for dev hub
      - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
        shell: bash
        run: 'echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt'

      # Authenticate dev hub
      - name: 'Authenticate Dev Hub'
        run: 'sfdx force:auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d'

      # Create scratch org
      - name: 'Create scratch org'
        run: 'sfdx force:org:create -f config/project-scratch-def.json -a ${{ github.event.repository.name }} -s'

      # Install dependant packages
      - name: 'Install Dependant Packages'
        run: 'sfdx texei:package:dependencies:install -k "1:${{ secrets.PACKAGE_CODE }}"'

      # Deploy source to scratch org
      - name: 'Push source to scratch org'
        run: 'sfdx force:source:push'

      # Run Apex tests in scratch org
      - name: 'Run Apex tests'
        run: 'sfdx force:apex:test:run -c -r human -d . -w 20'

      # LWC unit tests
      - name: 'Unit test Lightning Web Components'
        run: npm run test:unit:coverage

      # Run SonarCloud Scan
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Create Comment with Scratch Org URL
      - name: Add Comment with Scratch Org URL
        id: generate-comment
        run: echo ::set-output name=comment::$(sfdx force:org:open)

      # Add Comment with Scratch Org URL
      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          message: |
            ${{steps.generate-comment.outputs.comment}}
