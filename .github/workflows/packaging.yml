# Unique name for this workflow
name: Salesforce DX - Packaging

# Workflow starts when a pull request has been merged into develop
on:
  pull_request:
    branches:
      - develop
    types: [closed]

# Jobs to be executed
jobs:
  release-package-version:
    if: github.event.pull_request.merged == true && !contains(github.event.pull_request.title, 'Released new package version 04t')
    runs-on: ubuntu-latest
    steps:
      # Install Salesforce CLI
      - name: Install Salesforce CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
          ./sfdx-cli/install
      # Checkout the code in the pull request
      - name: 'Checkout source code'
        uses: actions/checkout@v2

      # Cache node_modules to speed up the process
      - name: Restore node_modules cache
        id: cache-npm
        uses: actions/cache@v1
        with:
          path: node_modules
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ env.cache-name }}-
            npm-
      # Install npm dependencies for Prettier and Jest
      - name: 'Install npm dependencies'
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci

      # Install texei SFDX Plugin
      - name: 'Install texei SFDX Plugin'
        run: 'echo "y" | sfdx plugins:install texei-sfdx-plugin'

      # Store secret for dev hub
      - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
        shell: bash
        run: 'echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt'

      # Authenticate dev hub
      - name: 'Authenticate Dev Hub'
        run: 'sfdx force:auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d'

      # Create scratch org
      - name: 'Create scratch org'
        run: 'sfdx force:org:create -f config/project-scratch-def.json -a ${{ github.event.repository.name }} -s -d 1'

      # Install dependant packages
      - name: 'Install Dependant Packages'
        run: 'sfdx texei:package:dependencies:install -k "1:${{ secrets.PACKAGE_CODE }}"'

      # Create package version and extract its id
      - name: Create package version
        id: createPackageVersion
        run: |
          set +e
          json=$(sfdx force:package:version:create -p "${{ secrets.PACKAGE_NAME}}" --installationkey "${{ secrets.PACKAGE_CODE }}" --definitionfile config/project-scratch-def.json --json --wait 60 --codecoverage)
          echo $json
          status=$(echo $json | jq '.status')
          if [ $status == "0" ]; then
              packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
              echo "::set-output name=packageVersionId::$packageVersionId"
          else
              echo "sfdx force:package:version:create failed"
          fi
          exit $status
      # Install new package in scratch org
      - name: 'Install new package version in scratch org'
        run: sfdx force:package:install -p ${{ steps.createPackageVersion.outputs.packageVersionId }} --wait 60 -u ${{ github.event.repository.name }} --installationkey "${{ secrets.PACKAGE_CODE }}"

      # Create PR for new package version
      - name: 'Create PR for new package version'
        id: create-pr
        uses: peter-evans/create-pull-request@v3
        with:
          title: 'Released new package version ${{ steps.createPackageVersion.outputs.packageVersionId }}'
          body: 'Released new package version ${{ steps.createPackageVersion.outputs.packageVersionId }}'
          commit-message: 'Released new package version ${{ steps.createPackageVersion.outputs.packageVersionId }}'
          branch: 'auto/release-package-version'
          delete-branch: true

      # Generate Workflow Token
      - name: 'Generate Token for PR actions'
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.WORKFLOW_APP_ID }}
          private_key: ${{ secrets.WORKFLOW_APP_PRIVATE_KEY }}

      # Set versionNumber
      - name: Save Latest Package Version
        id: savePackageVersion
        run: echo ::set-output name=latestVersion::$(sfdx force:package:version:list -p "${{ secrets.PACKAGE_NAME}}" -o CreatedDate --concise | tail -1 | awk '{print $2}')

      # Create a release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        with:
          tag_name: ${{ steps.savePackageVersion.outputs.latestVersion }}
          release_name: Pre-Release ${{ steps.savePackageVersion.outputs.latestVersion }}
          body: Pre-Release ${{ steps.createPackageVersion.outputs.packageVersionId }}
          prerelease: true

      # Approve pull request
      - name: 'Approve Pull Request'
        uses: juliangruber/approve-pull-request-action@v1
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          number: ${{ steps.create-pr.outputs.pull-request-number }}

      # Merge pull request
      - name: 'Merge pull request'
        uses: juliangruber/merge-pull-request-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.create-pr.outputs.pull-request-number }}
          method: squash

      # Housekeeping
      - name: Delete scratch org
        if: always()
        run: sfdx force:org:delete -p -u ${{ github.event.repository.name }}
